<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CI/CD :: SWE Tools</title>
    <link>https://dev-maz.github.io/swe-tools/ci-cd/index.html</link>
    <description>In software engineering, CI/CD or CICD is the combined practices of continuous integration (CI) and continuous delivery (CD) or, less often, continuous deployment. They are sometimes referred to collectively as continuous development or continuous software development.&#xA;Continuous integration Frequent merging of several small changes into a main branch. Continuous delivery Producing software in short cycles with high speed and frequency so that reliable software can be released at any time, with a simple and repeatable deployment process when deciding to deploy. Continuous deployment Automatic rollout of new software functionality. CI/CD bridges the gaps between development and operation activities and teams by enforcing automation in building, testing and deployment of applications. CI/CD services compile the incremental code changes made by developers, then link and package them into software deliverables. Automated tests verify the software functionality, and automated deployment services deliver them to end users. The aim is to increase early defect discovery, increase productivity, and provide faster release cycles. The process contrasts with traditional methods where a collection of software updates were integrated into one large batch before deploying the newer version.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://dev-maz.github.io/swe-tools/ci-cd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Argo CD</title>
      <link>https://dev-maz.github.io/swe-tools/ci-cd/argo/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dev-maz.github.io/swe-tools/ci-cd/argo/index.html</guid>
      <description>Argo CD is a Kubernetes-native continuous deployment (CD) tool. Unlike external CD tools that only enable push-based deployments, Argo CD can pull updated code from Git repositories and deploy it directly to Kubernetes resources. It enables developers to manage both infrastructure configuration and application updates in one system.&#xA;Argo CD offers the following key features and capabilities:&#xA;Manual or automatic deployment of applications to a Kubernetes cluster.&#xA;Automatic synchronization of application state to the current version of declarative configuration.</description>
    </item>
    <item>
      <title>Github Actions</title>
      <link>https://dev-maz.github.io/swe-tools/ci-cd/actions/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dev-maz.github.io/swe-tools/ci-cd/actions/index.html</guid>
      <description>GitHub Actions is a platform for continuous integration / continuous delivery (CI/CD). It enables you to automate build, testing, and deployment pipelines. It also lets you run arbitrary code on a specified repository when an event occurs. Actions uses code packages in Docker containers that run on GitHub servers. They are compatible with all programming languages to ensure you can run them on public clouds as well as local servers.</description>
    </item>
    <item>
      <title>Jenkins</title>
      <link>https://dev-maz.github.io/swe-tools/ci-cd/jenkins/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dev-maz.github.io/swe-tools/ci-cd/jenkins/index.html</guid>
      <description>Jenkins is an open source automation server. It helps automate the parts of software development related to building, testing, and deploying, facilitating continuous integration, and continuous delivery. It is a server-based system that runs in servlet containers such as Apache Tomcat, or by default as a stand-alone web-application in co-bundled Eclipse Jetty. It supports version control tools, including AccuRev, CVS, Subversion, Git, Mercurial, Perforce, ClearCase, and RTC, and can execute Apache Ant, Apache Maven, and sbt based projects as well as arbitrary shell scripts and Windows batch commands.</description>
    </item>
    <item>
      <title>Semaphore</title>
      <link>https://dev-maz.github.io/swe-tools/ci-cd/semaphore/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dev-maz.github.io/swe-tools/ci-cd/semaphore/index.html</guid>
      <description>Semaphore is a hosted continuous integration and deployment service used for testing and deploying software projects hosted on GitHub and BitBucket.&#xA;While open source projects can use Semaphore for free in its full capacity, free use for private projects is limited to 100 builds per month (Semaphore Classic) or $20 of service every month (Semaphore 2.0).&#xA;One of Semaphoreâ€™s features is native Docker support, which enables testing and deploying Docker-based applications. Semaphore also offers Boosters, a feature that reduces the duration of running a test suite to that of the longest test through automatic parallelization of builds for Ruby projects.</description>
    </item>
  </channel>
</rss>
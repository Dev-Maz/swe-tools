var relearn_searchindex = [
  {
    "breadcrumb": "Software Engineering Tools \u003e CI/CD",
    "content": "Argo CD is a Kubernetes-native continuous deployment (CD) tool. Unlike external CD tools that only enable push-based deployments, Argo CD can pull updated code from Git repositories and deploy it directly to Kubernetes resources. It enables developers to manage both infrastructure configuration and application updates in one system.\nArgo CD offers the following key features and capabilities:\nManual or automatic deployment of applications to a Kubernetes cluster.\nAutomatic synchronization of application state to the current version of declarative configuration.\nWeb user interface and command-line interface (CLI).\nAbility to visualize deployment issues, detect and remediate configuration drift.\nRole-based access control (RBAC) enabling multi-cluster management.\nSingle sign-on (SSO) with providers such as GitLab, GitHub, Microsoft, OAuth2, OIDC, LinkedIn, LDAP, and SAML 2.0\nSupport for webhooks triggering actions in GitLab, GitHub, and BitBucket.\nGitOps is a software engineering practice that uses a Git repository as its single source of truth. Teams commit declarative configurations into Git, and these configurations are used to create environments needed for the continuous delivery process. There is no manual setup of environments and no use of standalone scripts—everything is defined through the Git repository.\nA basic part of the GitOps process is a pull request. New versions of a configuration are introduced via pull request, merged with the main branch in the Git repository, and then the new version is automatically deployed. The Git repository contains a full record of all changes, including all details of the environment at every stage of the process.\nArgo CD handles the latter stages of the GitOps process, ensuring that new configurations are correctly deployed to a Kubernetes cluster.",
    "description": "Argo CD is a Kubernetes-native continuous deployment (CD) tool. Unlike external CD tools that only enable push-based deployments, Argo CD can pull updated code from Git repositories and deploy it directly to Kubernetes resources. It enables developers to manage both infrastructure configuration and application updates in one system.\nArgo CD offers the following key features and capabilities:\nManual or automatic deployment of applications to a Kubernetes cluster.\nAutomatic synchronization of application state to the current version of declarative configuration.",
    "tags": [],
    "title": "Argo CD",
    "uri": "/swe-tools/ci-cd/argo/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/swe-tools/categories/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools",
    "content": "In software engineering, CI/CD or CICD is the combined practices of continuous integration (CI) and continuous delivery (CD) or, less often, continuous deployment. They are sometimes referred to collectively as continuous development or continuous software development.\nContinuous integration Frequent merging of several small changes into a main branch. Continuous delivery Producing software in short cycles with high speed and frequency so that reliable software can be released at any time, with a simple and repeatable deployment process when deciding to deploy. Continuous deployment Automatic rollout of new software functionality. CI/CD bridges the gaps between development and operation activities and teams by enforcing automation in building, testing and deployment of applications. CI/CD services compile the incremental code changes made by developers, then link and package them into software deliverables. Automated tests verify the software functionality, and automated deployment services deliver them to end users. The aim is to increase early defect discovery, increase productivity, and provide faster release cycles. The process contrasts with traditional methods where a collection of software updates were integrated into one large batch before deploying the newer version.\nModern-day DevOps practices involve:\ncontinuous development,\ncontinuous testing,\ncontinuous integration,\ncontinuous deployment, and\ncontinuous monitoring\nThe CI/CD practice, or CI/CD pipeline, forms the backbone of modern day DevOps operations.\nThe following practices can enhance productivity of CI/CD pipelines, especially in systems hosted in the cloud:\nNumber of Pipelines: Small teams can be more productive by having one repository and one pipeline. In contrast, larger organizations may have separate repositories and pipelines for each team or even separate repositories and pipelines for each service within a team.\nPermissions: In the context of pipeline-related permissions, adhering to the principle of least privilege can be challenging due to the dynamic nature of architecture. Administrators may opt for more permissive permissions while implementing compensating security controls to minimize the blast radius.",
    "description": "In software engineering, CI/CD or CICD is the combined practices of continuous integration (CI) and continuous delivery (CD) or, less often, continuous deployment. They are sometimes referred to collectively as continuous development or continuous software development.\nContinuous integration Frequent merging of several small changes into a main branch. Continuous delivery Producing software in short cycles with high speed and frequency so that reliable software can be released at any time, with a simple and repeatable deployment process when deciding to deploy. Continuous deployment Automatic rollout of new software functionality. CI/CD bridges the gaps between development and operation activities and teams by enforcing automation in building, testing and deployment of applications. CI/CD services compile the incremental code changes made by developers, then link and package them into software deliverables. Automated tests verify the software functionality, and automated deployment services deliver them to end users. The aim is to increase early defect discovery, increase productivity, and provide faster release cycles. The process contrasts with traditional methods where a collection of software updates were integrated into one large batch before deploying the newer version.",
    "tags": [],
    "title": "CI/CD",
    "uri": "/swe-tools/ci-cd/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools",
    "content": "A source-code editor is a text editor program designed specifically for editing source code of computer programs. It may be a standalone application or it may be built into an integrated development environment (IDE).\nSource-code editors have features specifically designed to simplify and speed up typing of source code, such as syntax highlighting, indentation, autocomplete and brace matching functionality. These editors also provide a convenient way to run a compiler, interpreter, debugger, or other program relevant for the software-development process. So, while many text editors like Notepad can be used to edit source code, if they do not enhance, automate or ease the editing of code, they are not source-code editors.\nStructure editors are a different form of source-code editor, where instead of editing raw text, one manipulates the code’s structure, generally the abstract syntax tree. In this case features such as syntax highlighting, validation, and code formatting are easily and efficiently implemented from the concrete syntax tree or abstract syntax tree, but editing is often more rigid than free-form text. Structure editors also require extensive support for each language, and thus are harder to extend to new languages than text editors, where basic support only requires supporting syntax highlighting or indentation. For this reason, strict structure editors are not popular for source code editing, though some IDEs provide similar functionality.\nA source-code editor can check syntax while code is being entered and immediately warn of syntax problems. A few source-code editors compress source code, typically converting common keywords into single-byte tokens, removing unnecessary whitespace, and converting numbers to a binary form. Such tokenizing editors later uncompress the source code when viewing it, possibly prettyprinting it with consistent capitalization and spacing. A few source-code editors do both.\nThe Language Server Protocol, first used in Microsoft’s Visual Studio Code, allows for source code editors to implement an LSP client that can read syntax information about any language with a LSP server. This allows for source code editors to easily support more languages with syntax highlighting, refactoring, and reference finding. Many source code editors such as Neovim and Brackets have added a built-in LSP client while other editors such as Emacs, vim, and Sublime Text have support for an LSP Client via a separate plug-in.",
    "description": "A source-code editor is a text editor program designed specifically for editing source code of computer programs. It may be a standalone application or it may be built into an integrated development environment (IDE).\nSource-code editors have features specifically designed to simplify and speed up typing of source code, such as syntax highlighting, indentation, autocomplete and brace matching functionality. These editors also provide a convenient way to run a compiler, interpreter, debugger, or other program relevant for the software-development process. So, while many text editors like Notepad can be used to edit source code, if they do not enhance, automate or ease the editing of code, they are not source-code editors.",
    "tags": [],
    "title": "Code Editor",
    "uri": "/swe-tools/editor/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools",
    "content": "In software engineering, containerization is operating-system–level virtualization or application-level virtualization over multiple network resources so that software applications can run in isolated user spaces called containers in any cloud or non-cloud environment, regardless of type or vendor. The term “container” is overloaded, and it is important to ensure that the intended definition aligns with the audience’s understanding.\nEach container is basically a fully functional and portable cloud or non-cloud computing environment surrounding the application and keeping it independent of other environments running in parallel. Individually, each container simulates a different software application and runs isolated processes by bundling related configuration files, libraries and dependencies. But, collectively, multiple containers share a common operating system kernel (OS).\nIn recent times, containerization technology has been widely adopted by cloud computing platforms like Amazon Web Services, Microsoft Azure, Google Cloud Platform, and IBM Cloud. Containerization has also been pursued by the U.S. Department of Defense as a way of more rapidly developing and fielding software updates, with first application in its F-22 air superiority fighter.\nContainer orchestration or container management is mostly used in the context of application containers. Implementations providing such orchestration include Kubernetes and Docker swarm.\nContainer clusters need to be managed. This includes functionality to create a cluster, to upgrade the software or repair it, balance the load between existing instances, scale by starting or stopping instances to adapt to the number of users, to log activities and monitor produced logs or the application itself by querying sensors. Open-source implementations of such software include OKD and Rancher. Quite a number of companies provide container cluster management as a managed service, like Alibaba, Amazon, Google, Microsoft.",
    "description": "In software engineering, containerization is operating-system–level virtualization or application-level virtualization over multiple network resources so that software applications can run in isolated user spaces called containers in any cloud or non-cloud environment, regardless of type or vendor. The term “container” is overloaded, and it is important to ensure that the intended definition aligns with the audience’s understanding.\nEach container is basically a fully functional and portable cloud or non-cloud computing environment surrounding the application and keeping it independent of other environments running in parallel. Individually, each container simulates a different software application and runs isolated processes by bundling related configuration files, libraries and dependencies. But, collectively, multiple containers share a common operating system kernel (OS).",
    "tags": [],
    "title": "Containerization",
    "uri": "/swe-tools/container/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Containerization",
    "content": "Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers. The service has both free and premium tiers. The software that hosts the containers is called Docker Engine. It was first released in 2013 and is developed by Docker, Inc.\nDocker is a tool that is used to automate the deployment of applications in lightweight containers so that applications can work efficiently in different environments in isolation.\nContainers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels. Because all of the containers share the services of a single operating system kernel, they use fewer resources than virtual machines.\nDocker can package an application and its dependencies in a virtual container that can run on any Linux, Windows, or macOS computer. This enables the application to run in a variety of locations, such as on-premises, in public (see decentralized computing, distributed computing, and cloud computing) or private cloud. When running on Linux, Docker uses the resource isolation features of the Linux kernel (such as cgroups and kernel namespaces) and a union-capable file system (such as OverlayFS) to allow containers to run within a single Linux instance, avoiding the overhead of starting and maintaining virtual machines. Docker on macOS uses a Linux virtual machine to run the containers.\nBecause Docker containers are lightweight, a single server or virtual machine can run several containers simultaneously. A 2018 analysis found that a typical Docker use case involves running eight containers per host, and that a quarter of analyzed organizations run 18 or more per host. It can also be installed on a single board computer like the Raspberry Pi.\nThe Linux kernel’s support for namespaces mostly isolates an application’s view of the operating environment, including process trees, network, user IDs and mounted file systems, while the kernel’s cgroups provide resource limiting for memory and CPU. Since version 0.9, Docker includes its own component (called libcontainer) to use virtualization facilities provided directly by the Linux kernel, in addition to using abstracted virtualization interfaces via libvirt, LXC and systemd-nspawn.\nDocker implements a high-level API to provide lightweight containers that run processes in isolation.",
    "description": "Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers. The service has both free and premium tiers. The software that hosts the containers is called Docker Engine. It was first released in 2013 and is developed by Docker, Inc.\nDocker is a tool that is used to automate the deployment of applications in lightweight containers so that applications can work efficiently in different environments in isolation.",
    "tags": [],
    "title": "Docker",
    "uri": "/swe-tools/container/docker/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Containerization",
    "content": "Docker Swarm is a container orchestration tool for clustering and scheduling Docker containers. With Swarm, IT administrators and developers can establish and manage a cluster of Docker nodes as a single virtual system.\nDocker Swarm lets developers join multiple physical or virtual machines into a cluster. These individual machines are known as nodes or daemons.\nDocker Swarm also lets admins and developers launch Docker containers, connect containers to multiple hosts, handle each node’s resources and improve application availability throughout a system.\nDocker Engine, the layer between the operating system and container images, natively uses Swarm mode. Swarm mode integrates the orchestration capabilities of Docker Swarm into Docker Engine 1.12 and subsequent releases. Docker Swarm uses the standard Docker API to interface with other Docker tools, such as Docker Machine.\nThe Docker platform includes a variety of tools, services, content and automations that help developers build, ship and run applications without configuring or managing the underlying development environment. With Docker, developers can package and run applications in lightweight containers – loosely isolated environments that enable an application to run efficiently and seamlessly in many different conditions.\nDocker Swarm abstracts host resources into a shared pool for Docker containers.\nWith Docker Swarm, containers can connect to multiple hosts. Each node in the cluster can then easily deploy and access any containers within that swarm. Docker Swarm includes multiple worker nodes and at least one manager node to control the cluster’s activities and ensure its efficient operations.\nClustering is an important feature for container technology. It creates a cooperative group of systems that provide redundancy, enabling Docker Swarm failover if one or more nodes experience an outage. A Docker Swarm cluster also enables administrators and developers to add or subtract container iterations as computing demands change.",
    "description": "Docker Swarm is a container orchestration tool for clustering and scheduling Docker containers. With Swarm, IT administrators and developers can establish and manage a cluster of Docker nodes as a single virtual system.\nDocker Swarm lets developers join multiple physical or virtual machines into a cluster. These individual machines are known as nodes or daemons.\nDocker Swarm also lets admins and developers launch Docker containers, connect containers to multiple hosts, handle each node’s resources and improve application availability throughout a system.",
    "tags": [],
    "title": "Docker Swarm",
    "uri": "/swe-tools/container/swarm/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Code Editor",
    "content": "Emacs, originally named EMACS (an acronym for “Editor Macros”) is a family of text editors that are characterized by their extensibility. The manual for the most widely used variant, GNU Emacs, describes it as “the extensible, customizable, self-documenting, real-time display editor”. Development of the first Emacs began in the mid-1970s, and work on GNU Emacs, directly descended from the original, is ongoing; its latest version is 29.4 Edit this on Wikidata, released June 2024.\nEmacs has over 10,000 built-in commands and its user interface allows the user to combine these commands into macros to automate work. Implementations of Emacs typically feature a dialect of the Lisp programming language, allowing users and developers to write new commands and applications for the editor. Extensions have been written to, among other things, manage files, remote access, e-mail, outlines, multimedia, Git integration, RSS feeds, and collaborative editing, as well as implementations of ELIZA, Pong, Conway’s Life, Snake, Dunnet, and Tetris.\nThe original EMACS was written in 1976 by David A. Moon and Guy L. Steele Jr. as a set of macros for the TECO editor. It was inspired by the ideas of the TECO-macro editors TECMAC and TMACS.\nThe most popular, and most ported, version of Emacs is GNU Emacs, which was created by Richard Stallman for the GNU Project. XEmacs is a variant that branched from GNU Emacs in 1991. GNU Emacs and XEmacs use similar Lisp dialects and are, for the most part, compatible with each other. XEmacs development is inactive.\nGNU Emacs is, along with vi, one of the two main contenders in the traditional editor wars of Unix culture. GNU Emacs is among the oldest free and open source projects still under development. Emacs is primarily a text editor and is designed for manipulating pieces of text, although it is capable of formatting and printing documents like a word processor by interfacing with external programs such as LaTeX, Ghostscript or a web browser. Emacs provides commands to manipulate and differentially display semantic units of text such as words, sentences, paragraphs and source code constructs such as functions. It also features keyboard macros for performing user-defined batches of editing commands.\nGNU Emacs is a real-time display editor, as its edits are displayed onscreen as they occur. This is standard behavior for modern text editors but EMACS was among the earliest to implement this. The alternative is having to issue a distinct command to display text, (e.g. before or after modifying it). This was common in earlier (or merely simpler) line and context editors, such as QED (BTS, CTSS, Multics), ed (Unix), ED (CP/M), and Edlin (DOS).",
    "description": "Emacs, originally named EMACS (an acronym for “Editor Macros”) is a family of text editors that are characterized by their extensibility. The manual for the most widely used variant, GNU Emacs, describes it as “the extensible, customizable, self-documenting, real-time display editor”. Development of the first Emacs began in the mid-1970s, and work on GNU Emacs, directly descended from the original, is ongoing; its latest version is 29.4 Edit this on Wikidata, released June 2024.",
    "tags": [],
    "title": "Emacs",
    "uri": "/swe-tools/editor/emacs/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Version Control System",
    "content": "Git is a distributed version control system that tracks versions of files. It is often used to control source code by programmers who are developing software collaboratively.\nDesign goals of Git include speed, data integrity, and support for distributed, non-linear workflows — thousands of parallel branches running on different computers.\nAs with most other distributed version control systems, and unlike most client–server systems, Git maintains a local copy of the entire repository, also known as “repo”, with history and version-tracking abilities, independent of network access or a central server. A repository is stored on each computer in a standard directory with additional, hidden files to provide version control capabilities. Git provides features to synchronize changes between repositories that share history; copied (cloned) from each other. For collaboration, Git supports synchronizing with repositories on remote machines. Although all repositories (with the same history) are peers, developers often use a central server to host a repository to hold an integrated copy.\nGit is free and open-source software shared under the GPL-2.0-only license.\nGit was originally created by Linus Torvalds for version control during the development of the Linux kernel. The trademark “Git” is registered by the Software Freedom Conservancy, marking its official recognition and continued evolution in the open-source community.\nToday, Git is the de facto standard version control system. It is the most popular distributed version control system, with nearly 95% of developers reporting it as their primary version control system as of 2022. It is the most widely used source-code management tool among professional developers. There are offerings of Git repository services, including GitHub, SourceForge, Bitbucket and GitLab.",
    "description": "Git is a distributed version control system that tracks versions of files. It is often used to control source code by programmers who are developing software collaboratively.\nDesign goals of Git include speed, data integrity, and support for distributed, non-linear workflows — thousands of parallel branches running on different computers.\nAs with most other distributed version control systems, and unlike most client–server systems, Git maintains a local copy of the entire repository, also known as “repo”, with history and version-tracking abilities, independent of network access or a central server. A repository is stored on each computer in a standard directory with additional, hidden files to provide version control capabilities. Git provides features to synchronize changes between repositories that share history; copied (cloned) from each other. For collaboration, Git supports synchronizing with repositories on remote machines. Although all repositories (with the same history) are peers, developers often use a central server to host a repository to hold an integrated copy.",
    "tags": [],
    "title": "Git",
    "uri": "/swe-tools/vcs/git/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e CI/CD",
    "content": "GitHub Actions is a platform for continuous integration / continuous delivery (CI/CD). It enables you to automate build, testing, and deployment pipelines. It also lets you run arbitrary code on a specified repository when an event occurs. Actions uses code packages in Docker containers that run on GitHub servers. They are compatible with all programming languages to ensure you can run them on public clouds as well as local servers.\nGitHub Actions allows you to configure your workflow to be triggered once a specific event occurs in the repository. For example, when an issue is created or when a pull request is opened.\nA workflow contains one or several jobs running in parallel or sequential order. Each job runs inside a container or in a separate virtual machine (VM) runner. Additionally, each job includes one or several steps that run a predefined script or an action, a reusable extension that simplifies your workflow.\nA GitHub Actions workflow is an automated process that runs one or several jobs. You can configure workflows by defining a YAML file, which is checked into the repository. This file runs when:\nTriggered by a specific event in the repository\nTriggered manually\nAt a predefined schedule\nYou can find workflow definitions in the .github/workflows directory of each repository. A repository can include several workflows, each performing different tasks. You can use, for example, one workflow for building and testing pull requests, another workflow for deploying the application whenever a release is created, and an additional workflow for adding a label whenever a new issue is opened.\nAn event is a specific activity in a repository that triggers a workflow run. For example, activity can originate from GitHub when someone creates a pull request, opens an issue, or pushes a commit to a repository. You can also trigger a workflow run on a schedule, by posting to a REST API, or manually.",
    "description": "GitHub Actions is a platform for continuous integration / continuous delivery (CI/CD). It enables you to automate build, testing, and deployment pipelines. It also lets you run arbitrary code on a specified repository when an event occurs. Actions uses code packages in Docker containers that run on GitHub servers. They are compatible with all programming languages to ensure you can run them on public clouds as well as local servers.",
    "tags": [],
    "title": "Github Actions",
    "uri": "/swe-tools/ci-cd/actions/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Version Control System",
    "content": "GNU Bazaar (formerly Bazaar-NG, command line tool bzr) is a distributed and client–server revision control system sponsored by Canonical.\nBazaar can be used by a single developer working on multiple branches of local content, or by teams collaborating across a network.\nBazaar is written in the Python programming language, with packages for major Linux distributions, Mac OS X and Microsoft Windows. Bazaar is free software and part of the GNU Project.\nBazaar commands are similar to those found in CVS or Subversion. A new project can be started and maintained without a remote repository server by invoking bzr init in a directory which a person wishes to version.\nIn contrast to purely distributed version control systems which do not use a central server, Bazaar supports working with or without a central server. It is possible to use both methods at the same time with the same project. The websites Launchpad and SourceForge provide free hosting service for projects managed with Bazaar.\nBazaar has support for working with some other revision control systems. This allows users to branch from another system (such as Subversion), make local changes and commit them into a Bazaar branch, and then later merge them back into the other system. Read-only access is also available for Git and Mercurial. Bazaar also allows for interoperation with many other systems (including CVS, Darcs, Git, Perforce, Mercurial) by allowing one to import/export the history.\nBazaar supports files with names from the complete Unicode set. It also allows commit messages, committer names, etc. to be in Unicode.",
    "description": "GNU Bazaar (formerly Bazaar-NG, command line tool bzr) is a distributed and client–server revision control system sponsored by Canonical.\nBazaar can be used by a single developer working on multiple branches of local content, or by teams collaborating across a network.\nBazaar is written in the Python programming language, with packages for major Linux distributions, Mac OS X and Microsoft Windows. Bazaar is free software and part of the GNU Project.",
    "tags": [],
    "title": "GNU Bazaar",
    "uri": "/swe-tools/vcs/bazaar/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e CI/CD",
    "content": "Jenkins is an open source automation server. It helps automate the parts of software development related to building, testing, and deploying, facilitating continuous integration, and continuous delivery. It is a server-based system that runs in servlet containers such as Apache Tomcat, or by default as a stand-alone web-application in co-bundled Eclipse Jetty. It supports version control tools, including AccuRev, CVS, Subversion, Git, Mercurial, Perforce, ClearCase, and RTC, and can execute Apache Ant, Apache Maven, and sbt based projects as well as arbitrary shell scripts and Windows batch commands.\nThe Jenkins project was originally named Hudson, and was renamed in 2011 after a dispute with Oracle, which had forked the project and claimed rights to the project name. The Oracle fork, Hudson, continued to be developed for a time before being donated to the Eclipse Foundation. Oracle’s Hudson is no longer maintained[6][7] and was announced as obsolete in February 2017.\nAround 2007 Hudson became known as a better alternative to Cruise Control and other open-source build-servers. At the JavaOne conference in May 2008 the software won the Duke’s Choice Award in the Developer Solutions category.\nDuring November 2010, after the acquisition of Sun Microsystems by Oracle, an issue arose in the Hudson community with respect to the infrastructure used, which grew to encompass questions over the stewardship and control by Oracle. Negotiations between the principal project contributors and Oracle took place, and although there were many areas of agreement a key sticking point was the trademarked name “Hudson,” after Oracle claimed the right to the name and applied for a trademark in December 2010. As a result, on January 11, 2011, a call for votes was made to change the project name from “Hudson” to “Jenkins.” The proposal was overwhelmingly approved by a community vote on January 29, 2011, creating the Jenkins project.\nOn February 1, 2011, Oracle said that they intended to continue development of Hudson, and considered Jenkins a fork rather than a rename. Jenkins and Hudson therefore continued as two independent projects,[13] each claiming the other was the fork. As of June 2019, the Jenkins organization on GitHub had 667 project members and around 2,200 public repositories,[14] compared with Hudson’s 28 project members and 20 public repositories with the last update in 2016.[15]\nOn February 1, 2011, Oracle said that they intended to continue development of Hudson, and considered Jenkins a fork rather than a rename. Jenkins and Hudson therefore continued as two independent projects, each claiming the other was the fork. As of June 2019, the Jenkins organization on GitHub had 667 project members and around 2,200 public repositories, compared with Hudson’s 28 project members and 20 public repositories with the last update in 2016.\nIn 2011, creator Kohsuke Kawaguchi received an O’Reilly Open Source Award for his work on the Hudson/Jenkins project.\nOn April 20, 2016, version 2 was released with the Pipeline plugin enabled by default. The plugin allows for writing build instructions using a domain specific language based on Apache Groovy.\nJenkins replaced Hudson since February 8, 2017 in Eclipse.\nIn March 2018 Jenkins X software project for Kubernetes was publicly presented, with support for different cloud providers including AWS EKS among others.\nBuilds can be triggered by various means, for example:\na webhook that gets triggered upon pushed commits in a version control system\nscheduling via a cron-like mechanism\nrequesting a specific build URL.\nafter the other builds in the queue have completed\ninvoked by other builds",
    "description": "Jenkins is an open source automation server. It helps automate the parts of software development related to building, testing, and deploying, facilitating continuous integration, and continuous delivery. It is a server-based system that runs in servlet containers such as Apache Tomcat, or by default as a stand-alone web-application in co-bundled Eclipse Jetty. It supports version control tools, including AccuRev, CVS, Subversion, Git, Mercurial, Perforce, ClearCase, and RTC, and can execute Apache Ant, Apache Maven, and sbt based projects as well as arbitrary shell scripts and Windows batch commands.",
    "tags": [],
    "title": "Jenkins",
    "uri": "/swe-tools/ci-cd/jenkins/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Containerization",
    "content": "Kubernetes is an open-source container orchestration system for automating software deployment, scaling, and management. Originally designed by Google, the project is now maintained by a worldwide community of contributors, and the trademark is held by the Cloud Native Computing Foundation.\nThe name Kubernetes originates from the Greek κυβερνήτης (kubernḗtēs), meaning ‘governor’, ‘helmsman’ or ‘pilot’. Kubernetes is often abbreviated as K8s, counting the eight letters between the K and the s (a numeronym).\nKubernetes assembles one or more computers, either virtual machines or bare metal, into a cluster which can run workloads in containers. It works with various container runtimes, such as containerd and CRI-O. Its suitability for running and managing workloads of all sizes and styles has led to its widespread adoption in clouds and data centers. There are multiple distributions of this platform – from independent software vendors (ISVs) as well as hosted-on-cloud offerings from all the major public cloud vendors.\nKubernetes is one of the most widely deployed software systems in the world being used across companies including Google, Microsoft, Amazon, Apple, Meta, Nvidia, Reddit and Pinterest.\nKubernetes defines a set of building blocks (“primitives”) that collectively provide mechanisms that deploy, maintain, and scale applications based on CPU, memory or custom metrics. Kubernetes is loosely coupled and extensible to meet the needs of different workloads. The internal components as well as extensions and containers that run on Kubernetes rely on the Kubernetes API. The platform exerts its control over compute and storage resources by defining resources as objects, which can then be managed as such.\nKubernetes follows the primary/replica architecture. The components of Kubernetes can be divided into those that manage an individual node and those that are part of the control plane.",
    "description": "Kubernetes is an open-source container orchestration system for automating software deployment, scaling, and management. Originally designed by Google, the project is now maintained by a worldwide community of contributors, and the trademark is held by the Cloud Native Computing Foundation.\nThe name Kubernetes originates from the Greek κυβερνήτης (kubernḗtēs), meaning ‘governor’, ‘helmsman’ or ‘pilot’. Kubernetes is often abbreviated as K8s, counting the eight letters between the K and the s (a numeronym).",
    "tags": [],
    "title": "Kubernetes",
    "uri": "/swe-tools/container/kubernetes/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Version Control System",
    "content": "Mercurial is a distributed revision control tool for software developers. It is supported on Microsoft Windows, Linux, and other Unix-like systems, such as FreeBSD and macOS.\nMercurial’s major design goals include high performance and scalability, decentralization, fully distributed collaborative development, robust handling of both plain text and binary files, and advanced branching and merging capabilities, while remaining conceptually simple. It includes an integrated web-interface. Mercurial has also taken steps to ease the transition for users of other version control systems, particularly Subversion. Mercurial is primarily a command-line driven program, but graphical user interface extensions are available, e.g. TortoiseHg, and several IDEs offer support for version control with Mercurial. All of Mercurial’s operations are invoked as arguments to its driver program hg (a reference to Hg – the chemical symbol of the element mercury).\nOlivia Mackall originated Mercurial and served as its lead developer until late 2016. Mercurial is released as free software under the GPL-2.0-or-later license. It is mainly implemented using the Python programming language, but includes a binary diff implementation written in C.\nMackall first announced Mercurial on 19 April 2005. The impetus for this was the announcement earlier that month by Bitmover that they were withdrawing the free version of BitKeeper because of the development of SourcePuller.\nBitKeeper had been used for the version control requirements of the Linux kernel project. Mackall decided to write a distributed version control system as a replacement for use with the Linux kernel. This project started a few days after the now well-known Git project was initiated by Linus Torvalds with similar aims.",
    "description": "Mercurial is a distributed revision control tool for software developers. It is supported on Microsoft Windows, Linux, and other Unix-like systems, such as FreeBSD and macOS.\nMercurial’s major design goals include high performance and scalability, decentralization, fully distributed collaborative development, robust handling of both plain text and binary files, and advanced branching and merging capabilities, while remaining conceptually simple. It includes an integrated web-interface. Mercurial has also taken steps to ease the transition for users of other version control systems, particularly Subversion. Mercurial is primarily a command-line driven program, but graphical user interface extensions are available, e.g. TortoiseHg, and several IDEs offer support for version control with Mercurial. All of Mercurial’s operations are invoked as arguments to its driver program hg (a reference to Hg – the chemical symbol of the element mercury).",
    "tags": [],
    "title": "Mercurial",
    "uri": "/swe-tools/vcs/mercurial/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Containerization",
    "content": "Apache Mesos is an open-source project to manage computer clusters. It was developed at the University of California, Berkeley.\nMesos began as a research project in the UC Berkeley RAD Lab by then PhD students Benjamin Hindman, Andy Konwinski, and Matei Zaharia, as well as professor Ion Stoica. The students started working on the project as part of a course taught by David Culler. It was originally named Nexus but due to a conflict with another university’s project, was renamed to Mesos.\nMesos was first presented in 2009 (while still named Nexus) by Andy Konwinski at HotCloud ‘09 in a talk accompanying the first paper published about the project. Later in 2011 it was presented in a more mature state in a talk by Zaharia at the Usenix Symposium on Networked Systems Design and Implementation conference about the paper “Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center” by Benjamin Hindman, Andy Konwinski, Zaharia, Ali Ghodsi, Anthony D. Joseph, Randy Katz, Scott Shenker, Ion Stoica.\nOn July 27, 2016, the Apache Software Foundation announced version 1. It added the ability to centrally supply Docker, rkt and appc instances.\nOn April 5, 2021, it was voted to move Mesos to the Apache Attic, however the vote was cancelled two days later due to increased interest.\nMesos uses Linux cgroups to provide isolation for CPU, memory, I/O and file system. Mesos is comparable to Google’s Borg scheduler, a platform used internally to manage and distribute Google’s services.\nSoftware startup Mesosphere, Inc. sells the Datacenter Operating System, a distributed operating system, based on Apache Mesos. In September 2015, Microsoft announced a commercial partnership with Mesosphere to build container scheduling and orchestration services for Microsoft Azure. In October 2015, Oracle announced support for Mesos through Oracle Container Cloud Service.",
    "description": "Apache Mesos is an open-source project to manage computer clusters. It was developed at the University of California, Berkeley.\nMesos began as a research project in the UC Berkeley RAD Lab by then PhD students Benjamin Hindman, Andy Konwinski, and Matei Zaharia, as well as professor Ion Stoica. The students started working on the project as part of a course taught by David Culler. It was originally named Nexus but due to a conflict with another university’s project, was renamed to Mesos.",
    "tags": [],
    "title": "Mesos",
    "uri": "/swe-tools/container/mesos/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Code Editor",
    "content": "Notepad++ (sometimes npp or NPP), is a text and source code editor for use with Microsoft Windows. It supports tabbed editing, which allows working with multiple open files in one window. The program’s name comes from the C postfix increment operator.\nNotepad++ is released as free and open-source software under a GNU General Public License (GPL) 3.0 or later. At first, the project was hosted on the SourceForge software repository (2003–2010), from where it was downloaded over 28 million times, and twice won the SourceForge Community Choice Award for Best Developer Tool. Then, the project moved to TuxFamily (2010–2015), and then to GitHub (2015–present). Notepad++ uses the Scintilla editor component. Notepad++ is a source code editor. It features syntax highlighting, code folding and limited autocompletion for programming, scripting, and markup languages, but not intelligent code completion or syntax checking. As such, it may properly highlight code written in a supported schema, but whether the syntax is internally sound or compilable, cannot be verified. The language list also displays two special-case items for ordinary plain text: “Normal text” (default) or “MS-DOS Style”, which tries to emulate DOS-era text editors.\nNotepad++ has features to consume and create cross-platform plain text files. It recognizes three newline representations (CR, CR+LF, and LF) and can convert between them on the fly. In addition, it supports reinterpreting plain text files in various character encodings and can convert them to ASCII, UTF-8 or UCS-2. As such, it can fix plain text that seem gibberish only because their character encoding is not properly detected.\nNotepad++ also has features that improve plain text editing experience in general, such as:\nAutosave\nFinding and replacing strings of text with regular expressions\nSearching text strings within opened tabs\nSearching text strings in a directory\nGuided indentation\nLine bookmarking\nMacros\nSimultaneous editing\nSplit screen editing and synchronized scrolling\nLine operations, including sorting, case conversion (Uppercase, lowercase, camel case, sentence case), and removal of redundant whitespace\nTabbed document interface",
    "description": "Notepad++ (sometimes npp or NPP), is a text and source code editor for use with Microsoft Windows. It supports tabbed editing, which allows working with multiple open files in one window. The program’s name comes from the C postfix increment operator.\nNotepad++ is released as free and open-source software under a GNU General Public License (GPL) 3.0 or later. At first, the project was hosted on the SourceForge software repository (2003–2010), from where it was downloaded over 28 million times, and twice won the SourceForge Community Choice Award for Best Developer Tool. Then, the project moved to TuxFamily (2010–2015), and then to GitHub (2015–present). Notepad++ uses the Scintilla editor component. Notepad++ is a source code editor. It features syntax highlighting, code folding and limited autocompletion for programming, scripting, and markup languages, but not intelligent code completion or syntax checking. As such, it may properly highlight code written in a supported schema, but whether the syntax is internally sound or compilable, cannot be verified. The language list also displays two special-case items for ordinary plain text: “Normal text” (default) or “MS-DOS Style”, which tries to emulate DOS-era text editors.",
    "tags": [],
    "title": "Notepad++",
    "uri": "/swe-tools/editor/notepad/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e CI/CD",
    "content": "Semaphore is a hosted continuous integration and deployment service used for testing and deploying software projects hosted on GitHub and BitBucket.\nWhile open source projects can use Semaphore for free in its full capacity, free use for private projects is limited to 100 builds per month (Semaphore Classic) or $20 of service every month (Semaphore 2.0).\nOne of Semaphore’s features is native Docker support, which enables testing and deploying Docker-based applications. Semaphore also offers Boosters, a feature that reduces the duration of running a test suite to that of the longest test through automatic parallelization of builds for Ruby projects.\nSemaphore supports the following programming languages: C/C++, Clojure, Elixir, Go, Java, JavaScript, PHP, Python, Ruby and Scala. Projects written in other programming languages demand manual configuration.\nSome of the supported frameworks include: test/unit, RSpec, Cucumber, Steak, Capybara Webkit, Jasmine, Karma, Minitest, Poltergeist, PhantomJS.\nDeployment integrations include AWS, Heroku, Capistrano and Cloud 66.\nSemaphore 2.0 supports iOS and MacOS.\nOnce the project and the branch have been selected, Semaphore determines the configuration of the project, by extracting meta information. After customizing and configuring the wanted builds, Semaphore begins testing. The results of the performed jobs are highlighted red (failed) or green (passed). If a test fails, the developer needs to further configure and fix the code until the test is green.",
    "description": "Semaphore is a hosted continuous integration and deployment service used for testing and deploying software projects hosted on GitHub and BitBucket.\nWhile open source projects can use Semaphore for free in its full capacity, free use for private projects is limited to 100 builds per month (Semaphore Classic) or $20 of service every month (Semaphore 2.0).\nOne of Semaphore’s features is native Docker support, which enables testing and deploying Docker-based applications. Semaphore also offers Boosters, a feature that reduces the duration of running a test suite to that of the longest test through automatic parallelization of builds for Ruby projects.",
    "tags": [],
    "title": "Semaphore",
    "uri": "/swe-tools/ci-cd/semaphore/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Software Development tools are the tools which are used by the Software developers to create, maintain and debug the software applications. Software development tools consist of the computer programs which includes the compilers, code editors, GUI designers and the other analysis tools. These are also the solutions which the programmers utilizes to develop, edit and maintain the computer applications. Using software development tools makes the process of creating software faster and easier. These tools help you write, test, and debug code more efficiently, ensuring that your programs work correctly. They also facilitate collaboration among team members by keeping track of changes and managing tasks, which leads to better productivity and higher quality software.",
    "description": "Software Development tools are the tools which are used by the Software developers to create, maintain and debug the software applications. Software development tools consist of the computer programs which includes the compilers, code editors, GUI designers and the other analysis tools. These are also the solutions which the programmers utilizes to develop, edit and maintain the computer applications. Using software development tools makes the process of creating software faster and easier. These tools help you write, test, and debug code more efficiently, ensuring that your programs work correctly. They also facilitate collaboration among team members by keeping track of changes and managing tasks, which leads to better productivity and higher quality software.",
    "tags": [],
    "title": "Software Engineering Tools",
    "uri": "/swe-tools/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Code Editor",
    "content": "Sublime Text is a text and source code editor featuring a minimal interface, syntax highlighting and code folding with native support for numerous programming and markup languages, search and replace with support for regular expressions, an integrated terminal/console window, and customizable themes. Available for Windows, macOS, and Linux, its functionality can be expanded with plugins written in Python. Community-contributed plugins can be downloaded and installed via a built-in Package Control system, or written by the user via a Python API. Sublime Text is proprietary software, but can be downloaded for free and used as an evaluation version with no time limit.\nFeatures of Sublime Text include quick navigation to symbols, lines, or project files, a “command palette” with adaptive matching for quick keyboard invocation of frequently used commands, simultaneous editing, Python-based API for plugins, project- and syntax-specific preferences, extensive customizability via JSON settings files, including project-specific and platform-specific settings cross-platform support (Windows, macOS, and Linux) and associated support for writing cross-platform plugins and support for TextMate language grammars\nPackage Control is an open source third-party package manager for Sublime Text which allows the user to find, install, upgrade and remove plug-ins, usually without restarting Sublime Text. The package manager keeps installed packages up-to-date with an auto-upgrade feature and downloads packages from GitHub, BitBucket and a custom JSON-encoded channel/repository system. It also handles updating packages cloned from GitHub and BitBucket via Git and Hg, as well as providing commands for enabling and disabling packages. The package manager also includes a command to bundle any package directory into a .sublime-package file.\nNotable third-party packages include:\nLSP - Support for the Language Server Protocol\nBracket Highlighter – Enhances the basic highlights Sublime Text provides for bracket pairs\nSublimeLinter – Code linting (validation) for JavaScript, Perl, PHP, Python, Ruby, and others\nSidebar Enhancements – Enhancements to the Sublime Text sidebar with new options for deleting, opening, moving, creating, editing, and finding files",
    "description": "Sublime Text is a text and source code editor featuring a minimal interface, syntax highlighting and code folding with native support for numerous programming and markup languages, search and replace with support for regular expressions, an integrated terminal/console window, and customizable themes. Available for Windows, macOS, and Linux, its functionality can be expanded with plugins written in Python. Community-contributed plugins can be downloaded and installed via a built-in Package Control system, or written by the user via a Python API. Sublime Text is proprietary software, but can be downloaded for free and used as an evaluation version with no time limit.",
    "tags": [],
    "title": "Sublime Text",
    "uri": "/swe-tools/editor/sublime/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Version Control System",
    "content": "Apache Subversion (often abbreviated SVN, after its command name svn) is a version control system distributed as open source under the Apache License. Software developers use Subversion to maintain current and historical versions of files such as source code, web pages, and documentation. Its goal is to be a mostly compatible successor to the widely used Concurrent Versions System (CVS).\nThe open source community has used Subversion widely: for example, in projects such as Apache Software Foundation, FreeBSD, SourceForge, and from 2006 to 2019, GCC. CodePlex was previously a common host for Subversion repositories.\nSubversion was created by CollabNet Inc. in 2000, and is now a top-level Apache project being built and used by a global community of contributors.\nCollabNet founded the Subversion project in 2000 as an effort to write an open-source version-control system which operated much like CVS but which fixed the bugs and supplied some features missing in CVS. By 2001, Subversion had advanced sufficiently to host its own source code, and in February 2004, version 1.0 was released. In November 2009, Subversion was accepted into Apache Incubator: this marked the beginning of the process to become a standard top-level Apache project. It became a top-level Apache project on February 17, 2010.",
    "description": "Apache Subversion (often abbreviated SVN, after its command name svn) is a version control system distributed as open source under the Apache License. Software developers use Subversion to maintain current and historical versions of files such as source code, web pages, and documentation. Its goal is to be a mostly compatible successor to the widely used Concurrent Versions System (CVS).\nThe open source community has used Subversion widely: for example, in projects such as Apache Software Foundation, FreeBSD, SourceForge, and from 2006 to 2019, GCC. CodePlex was previously a common host for Subversion repositories.",
    "tags": [],
    "title": "Subversion",
    "uri": "/swe-tools/vcs/subversion/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/swe-tools/tags/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools",
    "content": "Version control (also known as revision control, source control, and source code management) is the software engineering practice of controlling, organizing, and tracking different versions in history of computer files; primarily source code text files, but generally any type of file.\nVersion control is a component of software configuration management.\nA version control system is a software tool that automates version control. Alternatively, version control is embedded as a feature of some systems such as word processors, spreadsheets, collaborative web docs, and content management systems, e.g., Wikipedia’s page history.\nVersion control includes viewing old versions and enables reverting a file to a previous version.\nAs teams develop software, it is common for multiple versions of the same software to be deployed in different sites and for the developers to work simultaneously on updates. Bugs or features of the software are often only present in certain versions (because of the fixing of some problems and the introduction of others as the program develops). Therefore, for the purposes of locating and fixing bugs, it is vitally important to be able to retrieve and run different versions of the software to determine in which version(s) the problem occurs. It may also be necessary to develop two versions of the software concurrently: for instance, where one version has bugs fixed, but no new features (branch), while the other version is where new features are worked on (trunk).\nAt the simplest level, developers could simply retain multiple copies of the different versions of the program, and label them appropriately. This simple approach has been used in many large software projects. While this method can work, it is inefficient as many near-identical copies of the program have to be maintained. This requires a lot of self-discipline on the part of developers and often leads to mistakes. Since the code base is the same, it also requires granting read-write-execute permission to a set of developers, and this adds the pressure of someone managing permissions so that the code base is not compromised, which adds more complexity. Consequently, systems to automate some or all of the revision control process have been developed. This ensures that the majority of management of version control steps is hidden behind the scenes.\nMoreover, in software development, legal and business practice, and other environments, it has become increasingly common for a single document or snippet of code to be edited by a team, the members of which may be geographically dispersed and may pursue different and even contrary interests. Sophisticated revision control that tracks and accounts for ownership of changes to documents and code may be extremely helpful or even indispensable in such situations.\nRevision control may also track changes to configuration files, such as those typically stored in /etc or /usr/local/etc on Unix systems. This gives system administrators another way to easily track changes made and a way to roll back to earlier versions should the need arise.\nMany version control systems identify the version of a file as a number or letter, called the version number, version, revision number, revision, or revision level. For example, the first version of a file might be version 1. When the file is changed the next version is 2. Each version is associated with a timestamp and the person making the change. Revisions can be compared, restored, and, with some types of files, merged.",
    "description": "Version control (also known as revision control, source control, and source code management) is the software engineering practice of controlling, organizing, and tracking different versions in history of computer files; primarily source code text files, but generally any type of file.\nVersion control is a component of software configuration management.\nA version control system is a software tool that automates version control. Alternatively, version control is embedded as a feature of some systems such as word processors, spreadsheets, collaborative web docs, and content management systems, e.g., Wikipedia’s page history.",
    "tags": [],
    "title": "Version Control System",
    "uri": "/swe-tools/vcs/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Code Editor",
    "content": "Vim (vi improved) is a free and open-source, screen-based text editor program. It is an improved clone of Bill Joy’s vi. Vim’s author, Bram Moolenaar, derived Vim from a port of the Stevie editor for Amiga and released a version to the public in 1991. Vim is designed for use both from a command-line interface and as a standalone application in a graphical user interface. Since its release for the Amiga, cross-platform development has made it available on many other systems. In 2018, it was voted the most popular editor amongst Linux Journal readers; in 2015 the Stack Overflow developer survey found it to be the third most popular text editor, and in 2019 the fifth most popular development environment.\nLike vi, Vim’s interface is not based on menus or icons but on commands given in a text user interface; its GUI mode, gVim, adds menus and toolbars for commonly used commands but the full functionality is still expressed through its command line mode. Vi (and by extension Vim) tends to allow a typist to keep their fingers on the home row, which can be an advantage for a touch typist.\nVim has a built-in tutorial for beginners called vimtutor, which is usually installed along with Vim, but is a separate executable and can be run with a shell command. The Vim Users’ Manual details Vim’s features and can be read from within Vim, or found online.\nVim also has a built-in help facility (using the :help command) which allows users to query and navigate through commands and features.\nLike vi, vim supports multiple editing modes. Depending on the mode, typed characters are interpreted either as sequences of commands or are inserted as text. In Vim there are 14 editing modes, 7 basic modes and 7 variants:\nNormal mode – used for editor commands. This is generally the default mode and by default hitting ESC returns the editor to this mode.\nInsert mode – used for typing text in a way similar to most modern editors. In this mode, opened text in buffers can be modified with the text entered from the keyboard.\nVisual mode – used to select areas of text. Commands can be run on the selected area – moving, editing, filtering via built-in or external command, etc.\nVisual linewise, a subtype of visual mode which selects one or more whole lines.\nVisual blockwise, another subtype which selects a rectangular block of text across one or more lines.\nSelect mode – similar to visual, but the commands are not interpreted, instead, highlighted text is directly replaced by input from the keyboard; similar to the selection mode used in editors on Microsoft Windows platforms.\nCommand-line or Cmdline mode – provides a single line input at the bottom of the Vim window. Commands (beginning with :) and some other keys for specific actions (including pattern search and the filter command) activate this mode. On completion of the command, Vim returns to the previous mode.\nEx mode – accepts a sequence of commands.\nTerminal-Job mode – Interacting with a job in a terminal window.",
    "description": "Vim (vi improved) is a free and open-source, screen-based text editor program. It is an improved clone of Bill Joy’s vi. Vim’s author, Bram Moolenaar, derived Vim from a port of the Stevie editor for Amiga and released a version to the public in 1991. Vim is designed for use both from a command-line interface and as a standalone application in a graphical user interface. Since its release for the Amiga, cross-platform development has made it available on many other systems. In 2018, it was voted the most popular editor amongst Linux Journal readers; in 2015 the Stack Overflow developer survey found it to be the third most popular text editor, and in 2019 the fifth most popular development environment.",
    "tags": [],
    "title": "Vim",
    "uri": "/swe-tools/editor/vim/index.html"
  },
  {
    "breadcrumb": "Software Engineering Tools \u003e Code Editor",
    "content": "Visual Studio Code, commonly referred to as VS Code, is an integrated development environment developed by Microsoft for Windows, Linux, macOS and web browsers. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded version control with Git. Users can change the theme, keyboard shortcuts, preferences, and install extensions that add functionality.\nVisual Studio Code is proprietary software released under the “Microsoft Software License”, but based on the MIT licensed program named “Visual Studio Code — Open Source” (also known as “Code — OSS”), also created by Microsoft and available through GitHub. Open-source binaries are available from VSCodium, without Microsoft’s telemetry.\nIn the Stack Overflow 2023 Developer Survey, Visual Studio Code was ranked the most popular developer environment tool among 86,544 respondents, with 73.71% reporting that they use it. Visual Studio Code is a source-code editor that can be used with a variety of programming languages, including C, C#, C++, Fortran, Go, Java, JavaScript, Node.js, Python, Rust, and Julia. Visual Studio Code employs the same editor component (codenamed “Monaco”) used in Azure DevOps (formerly called “Visual Studio Online” and “Visual Studio Team Services”).\nThe downloadable version of Visual Studio Code is built on the Electron framework, which is used to develop Node.js web applications that run on the Blink layout engine. Visual Studio Code for the Web is a browser-based version of the editor that can be used to edit both local files and remote repositories (on GitHub and Microsoft Azure) without installing the full program. It is officially supported and hosted by Microsoft and can be accessed at vscode.dev.\nOut of the box, Visual Studio Code includes basic support for most common programming languages. This basic support includes syntax highlighting, bracket matching, code folding, and configurable snippets. Visual Studio Code also ships with IntelliSense for JavaScript, TypeScript, JSON, CSS, and HTML, as well as debugging support for Node.js. Support for additional languages can be provided by freely available extensions on the VS Code Marketplace.\nInstead of a project system, it allows users to open one or more directories, which can then be saved in workspaces for future reuse. This allows it to operate as a language-agnostic code editor for any language. It supports many programming languages and a set of features that differ per language. Unwanted files and folders can be excluded from the project tree via settings. Many Visual Studio Code features are not exposed through menus or the user interface but can be accessed via the command palette. The command palette is able to execute virtually every feature the graphical interface supports, making it very keyboard-accessible.\nVisual Studio Code can be extended via extensions, available through a central repository. This includes additions to the editor and language support. A notable feature is the ability to create extensions that add support for new languages, themes, debuggers, time travel debuggers, perform static code analysis, and add code linters using the Language Server Protocol.\nSource control is a built-in feature of Visual Studio Code. It has a dedicated tab inside of the menu bar where users can access version control settings and view changes made to the current project. To use the feature, Visual Studio Code must be linked to any supported version control system (Git, Apache Subversion, Perforce, etc.). This allows users to create repositories and to make push and pull requests directly from the Visual Studio Code program.\nVisual Studio Code collects usage data and sends it to Microsoft to help improve the product. This telemetry feature can be disabled. The information contained in this telemetry data can be inspected by the public, since the product is open source.",
    "description": "Visual Studio Code, commonly referred to as VS Code, is an integrated development environment developed by Microsoft for Windows, Linux, macOS and web browsers. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded version control with Git. Users can change the theme, keyboard shortcuts, preferences, and install extensions that add functionality.\nVisual Studio Code is proprietary software released under the “Microsoft Software License”, but based on the MIT licensed program named “Visual Studio Code — Open Source” (also known as “Code — OSS”), also created by Microsoft and available through GitHub. Open-source binaries are available from VSCodium, without Microsoft’s telemetry.",
    "tags": [],
    "title": "VSCode",
    "uri": "/swe-tools/editor/vscode/index.html"
  }
]
